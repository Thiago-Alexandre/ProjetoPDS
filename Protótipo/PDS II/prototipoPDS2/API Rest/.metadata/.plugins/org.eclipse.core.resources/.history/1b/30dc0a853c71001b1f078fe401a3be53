package com.pds.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.pds.dto.UsuarioForSaveDTO;
import com.pds.dto.UsuarioForUpdateDTO;
import com.pds.dto.UsuarioResponseDTO;
import com.pds.model.Usuario;
import com.pds.service.UsuarioService;

@RequestMapping("/SistemaPatrimonial")
@RestController
public class UsuarioController {

	private final UsuarioService usuarioService;

	@Autowired		/** Injeção de dependências*/
    public UsuarioController(UsuarioService usuarioService) {
        this.usuarioService = usuarioService;
    }
	
	@PostMapping(value="/usuario")
    public ResponseEntity<UsuarioResponseDTO> salvar(@RequestBody @Valid UsuarioForSaveDTO dto) {
        Usuario usuario = usuarioService.salvar(dto.generationObject(), dto.getFuncionario());
        return new ResponseEntity<>(UsuarioResponseDTO.generationDTO(usuario), HttpStatus.CREATED);
    }
	
	@PutMapping(value="/usuario")
	public ResponseEntity<UsuarioResponseDTO> alterar(@RequestBody @Valid UsuarioForUpdateDTO dto) {
		Usuario usuario = usuarioService.alterar(dto.generationObject());
		if(usuario.getId() != null) {
        	return new ResponseEntity<>(UsuarioResponseDTO.generationDTO(usuario), HttpStatus.OK);
        }
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="/usuario/{id}")
	public ResponseEntity<UsuarioResponseDTO> pesquisar(@PathVariable Long id) {
		Usuario usuario = usuarioService.pesquisar(id);
        if(usuario.getId() != null) {
        	return new ResponseEntity<>(UsuarioResponseDTO.generationDTO(usuario), HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="/usuarios")
	public ResponseEntity<List<UsuarioResponseDTO>> listar(
			@RequestParam(value="idOrganizacao") Long idOrganizacao,
			@RequestParam(value="bloqueado") Boolean bloqueado,
			@RequestParam(value="estagiario") Boolean estagiario
	) {
		List<UsuarioResponseDTO> usuarios = usuarioService.listar(idOrganizacao, bloqueado, estagiario);
		if(usuarios.isEmpty()) {
			return new ResponseEntity<>(usuarios, HttpStatus.NOT_FOUND);
	    }
		return new ResponseEntity<>(usuarios, HttpStatus.OK);
	}
}