package com.pds.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pds.dto.AdministradorForSaveDTO;
import com.pds.dto.AdministradorForUpdateDTO;
import com.pds.dto.AdministradorResponseDTO;
import com.pds.dto.UsuarioLoginDTO;
import com.pds.dto.UsuarioResponseDTO;
import com.pds.model.Administrador;
import com.pds.service.AdministradorService;

@RequestMapping("/SistemaPatrimonial")
@RestController
public class AdministradorController {

	private final AdministradorService administradorService;

	@Autowired		/** Injeção de dependências*/
    public AdministradorController(AdministradorService administradorService) {
        this.administradorService = administradorService;
    }
	
	@PostMapping(value="/administrador")
    public ResponseEntity<AdministradorResponseDTO> salvar(@RequestBody @Valid AdministradorForSaveDTO dto) {
        Administrador administrador = administradorService.salvar(dto.generationObject());
        return new ResponseEntity<>(AdministradorResponseDTO.generationDTO(administrador), HttpStatus.CREATED);
    }
	
	@PutMapping(value="/administrador")
	public ResponseEntity<AdministradorResponseDTO> alterar(@RequestBody @Valid AdministradorForUpdateDTO dto) {
		Administrador administrador = administradorService.alterar(dto.generationObject());
		if(administrador.getId() != null) {
        	return new ResponseEntity<>(AdministradorResponseDTO.generationDTO(administrador), HttpStatus.OK);
        }
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="/administrador/{id}")
	public ResponseEntity<AdministradorResponseDTO> pesquisar(@PathVariable Long id) {
		Administrador administrador = administradorService.pesquisar(id);
        if(administrador.getId() != null) {
        	return new ResponseEntity<>(AdministradorResponseDTO.generationDTO(administrador), HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="/administrador/login")
	public ResponseEntity<AdministradorResponseDTO> pesquisar(@RequestBody @Valid AdministradorLoginDTO dto) {
		AdministradorResponseDTO admin = administradorService.pesquisar(dto.getLogin(), dto.getSenha());
        if(admin.getId() != null) {
        	return new ResponseEntity<>(admin, HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="/administradores/{bloqueado}")
	public ResponseEntity<List<AdministradorResponseDTO>> listar(@PathVariable Boolean bloqueado) {
		List<AdministradorResponseDTO> administradores = administradorService.listar(bloqueado);
        if(administradores.isEmpty()) {
            return new ResponseEntity<>(administradores, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(administradores, HttpStatus.OK);
	}
}