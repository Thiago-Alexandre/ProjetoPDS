package com.pds.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pds.dto.UsuarioResponseDTO;
import com.pds.model.Usuario;
import com.pds.model.Funcionario;
import com.pds.repository.UsuarioRepository;

@Service		/** Classe fornecedora dos serviços de acesso ao repository. */
public class UsuarioService {

	private final UsuarioRepository usuarioRepository;
	private final FuncionarioService funcionarioService;

	@Autowired		/** Injeção de dependências*/
    public UsuarioService(UsuarioRepository usuarioRepository, FuncionarioService funcionarioService) {
        this.usuarioRepository = usuarioRepository;
        this.funcionarioService = funcionarioService;
    }

	/**
	 * Método para salvar um novo usuário.
	 * Dados validados e em formato correspondente.
	 * Verifica se o Funcionário que será vinculada ao novo usuário está salva no banco;
	 * Se estiver, os dados do funcionário são vinculados no novo Usuario;
	 * O Usuario é salvo e retorna os dados salvos;
	 * Se não estiver, retorna um objeto Usuario vazio.
	 * @param usuario objeto Usuario com os novos dados
	 * @param idFuncionario objeto Long referente ao ID do Funcionario
	 * @return objeto Usuario com os dados salvos ou objeto Usuario vazio
	 */
    public Usuario salvar(Usuario usuario, Long idFuncionario) {
    	Funcionario funcionarioPesquisada = funcionarioService.pesquisar(idFuncionario);
		if(funcionarioPesquisada.getId() != null) {
			usuario.setFuncionario(funcionarioPesquisada);
			return usuarioRepository.save(usuario);
		}
        return new Usuario();
    }
    
    /**
     * Método para alterar os dados de um Usuario
     * Dados validados e em formato correspondente.
     * Verifica se o Usuario que será alterado está salvo no banco;
     * Se estiver, recupera os dados do Funcionario vinculado;
     * (o Funcionario vinculado ao Usuario não poderá ser alterada pelo cliente)
     * Salva as alterações e retorna os dados salvos;
     * Se não estiver, retorna um objeto Usuario vazio.
     * @param funcionario objeto Funcionario com os novos dados
     * @return objeto Usuario com os dados salvos ou objeto Usuario vazio
     */
    public Usuario alterar(Usuario usuario) {
    	Optional<Usuario> usuarioSaved = usuarioRepository.findById(usuario.getId());
        if(usuarioSaved.isPresent()) {
        	usuario.setFuncionario(usuarioSaved.get().getFuncionario());
        	return usuarioRepository.save(usuario);
        } else {
            return new Usuario();
        }
    }
    
    /**
     * Método para pesquisar um Usuario.
     * Verifica se o Usuario está salvo no banco;
     * Se estiver, retorna os dados salvos;
     * Se não estiver, retorna um objeto Usuario vazio.
     * @param id objeto Long referente ao ID do Usuario pesquisado
     * @return objeto Usuario com os dados salvos ou objeto Usuario vazio
     */
    public Usuario pesquisar(Long id) {
    	Optional<Usuario> usuario = usuarioRepository.findById(id);
        if(usuario.isPresent()) {
        	return usuario.get();
        } else {
            return new Usuario();
        }
    }
    
    /**
     * Método para pesquisar Usuarios de determinada Organização.
     * Verifica se existem Usuarios com determinada Organização vinculada;
     * Se sim, retorna uma lista com os dados salvos;
     * Se não, retorna uma lista vazia.
     * @param Organizacao objeto Long referente ao id da Organização vinculada
     * @return Lista de objetos UsuarioResponseDTO correspondentes a pesquisa ou Lista vazia
     */
    public List<UsuarioResponseDTO> listar(Long organizacao) {
    	Funcionario funcionarioPesquisada = funcionarioService.pesquisar(organizacao);
    	if(funcionarioPesquisada.getId() != null) {
			List<UsuarioResponseDTO> filiais = UsuarioRepository.findByFuncionario(FuncionarioPesquisada);
			if(!filiais.isEmpty()) {
	            return filiais;
	        }
		}
		return new ArrayList<UsuarioResponseDTO>() ;
    }
}